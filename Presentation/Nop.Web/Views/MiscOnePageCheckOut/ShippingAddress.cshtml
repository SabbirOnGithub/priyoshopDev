@model CheckoutShippingAddressModel
@using Nop.Plugin.Misc.OnePageCheckOut.Models.Checkout;


<div class="page checkout-page shipping-address-page">
    <div class="page-title">
        <h1 id="ExistingShippingAddressesView">
            @T("Checkout.ShippingAddress")
            <a onclick="shippingAddressToggle(this)"> @T("Checkout.OrEnterNewAddress")</a>
        </h1>

        <h1 id="NewShippingAddressesView" style="display: none">
            @T("Checkout.EnterNewAddress")
            <a onclick="shippingAddressToggle(this)">@T("Checkout.OrShippingAddress") </a>
        </h1>
    </div>

    <div class="page-body checkout-data">
        @using (Html.BeginForm(null, null, FormMethod.Post, new { id = "new-shipping-address-form" }))
        {
            <div style="display:none">
                @if (Model.AllowPickUpInStore)
                {
                    <div class="section pickup-in-store">
                        <div class="selector">
                            @{
                                var pickupInStoreName = T("Checkout.PickUpInStore").Text;
                                if (!String.IsNullOrEmpty(Model.PickUpInStoreFee))
                                {
                                    pickupInStoreName = T("Checkout.PickUpInStoreAndFee", Model.PickUpInStoreFee).Text;
                                }
                            }

                            @Html.CheckBoxFor(x => x.PickUpInStore)
                            <label for="@Html.FieldIdFor(model => model.PickUpInStore)">@pickupInStoreName</label>
                        </div>

                        <div class="description">
                            @T("Checkout.PickUpInStore.Description")
                        </div>

                        <script type="text/javascript">
                            $(document).ready(function () {
                                $("#@Html.FieldIdFor(model => model.PickUpInStore)").change(togglePickUpInStore);
                                togglePickUpInStore();
                            });

                            function togglePickUpInStore() {
                                if ($('#@Html.FieldIdFor(model => model.PickUpInStore)').is(':checked')) {
                                    $('#shipping-addresses-form').hide();
                                } else {
                                    $('#shipping-addresses-form').show();
                                }
                            }
                        </script>
                    </div>
                }
            </div>

            <div class="shipping-addresses" id="shipping-addresses-form">
                @Html.Widget("checkout_shipping_address_top")

                <div id="allExistingShippingAddresses">
                    @if (Model.ExistingAddresses.Count > 0)
                    {
                        <div class="section select-shipping-address">
                            <div class="title">
                                <strong>@T("Checkout.SelectShippingAddress")</strong>
                            </div>

                            <div id="slidingAdress" class="address-grid viewport" style="display:none" data-ss="@Model.ExistingAddresses.Count">
                                @foreach (var item in Model.ExistingAddresses)
                                {
                                    <div class="address-item" id="Adress@(item.Id)">
                                        <ul class="address-box">
                                            <li class="name">
                                                @item.FirstName @item.LastName
                                            </li>

                                            <li class="email">
                                                <label>@T("Address.Fields.Email"):</label>
                                                <span>@item.Email</span>
                                            </li>

                                            @if (item.PhoneEnabled)
                                            {
                                                <li class="phone">
                                                    <label>@T("Address.Fields.PhoneNumber"):</label>
                                                    <span>@item.PhoneNumber</span>
                                                </li>
                                            }

                                            @if (item.FaxEnabled)
                                            {
                                                <li class="fax">
                                                    <label>@T("Address.Fields.FaxNumber"):</label>
                                                    <span>@item.FaxNumber</span>
                                                </li>
                                            }

                                            @if (item.CompanyEnabled && !String.IsNullOrEmpty(item.Company))
                                            {
                                                <li class="company">
                                                    @item.Company
                                                </li>
                                            }

                                            @if (item.StreetAddressEnabled)
                                            {
                                                <li class="address1">
                                                    @item.Address1
                                                </li>
                                            }

                                            @if (item.StreetAddress2Enabled && !String.IsNullOrEmpty(item.Address2))
                                            {
                                                <li class="address2">
                                                    @item.Address2
                                                </li>
                                            }

                                            @if (item.CityEnabled || item.StateProvinceEnabled || item.ZipPostalCodeEnabled)
                                            {
                                                <li class="city-state-zip">
                                                    @if (item.CityEnabled)
                                                    {
                                                        @item.City
                                                    }

                                                    @if (item.CityEnabled && (item.StateProvinceEnabled || item.ZipPostalCodeEnabled))
                                                    {
                                                        <text>,</text>
                                                    }

                                                    @if (item.StateProvinceEnabled)
                                                    {
                                                        @item.StateProvinceName
                                                    }

                                                    @if (item.ZipPostalCodeEnabled)
                                                    {
                                                        @item.ZipPostalCode
                                                    }
                                                </li>
                                            }

                                            @if (item.CountryEnabled && !String.IsNullOrEmpty(item.CountryName))
                                            {
                                                <li class="country">
                                                    @item.CountryName
                                                </li>
                                            }

                                            @if (!String.IsNullOrEmpty(item.FormattedCustomAddressAttributes))
                                            {
                                                <li class="custom-attributes-view">
                                                    @Html.Raw(item.FormattedCustomAddressAttributes)
                                                </li>
                                            }
                                        </ul>

                                        <div class="select-button">
                                            <input type="radio" id="SelectedShippingAdressId" name="SelectedShippingAdressId" value="@item.Id" class="button-1 select-shipping-address-button" checked="@(Model.SelectedShippingAdressId == item.Id)" onclick="SaveSelectedShippingAddress(@item.Id )" />
                                            <div class="city-bd" style="display:none;">@item.City</div>
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>
                    }

                    <div class="address-button-section">
                        <div class="new-address-btn" onclick="shippingAddressToggle(this)">
                            <img src="~/Themes/Pavilion/Content/img/new-address-btn.png" />
                        </div>
                    </div>
                </div>

                @Html.Widget("checkout_shipping_address_middle")
                <div id="newShippingAddress" class="section new-shipping-address" style="display: none">
                    <div class="new-address-form">
                        <div class="enter-address">
                            @{
                                var validationSummary = Html.ValidationSummary(true);
                            }

                            @if (!MvcHtmlString.IsNullOrEmpty(validationSummary))
                            {
                                <div class="message-error">@validationSummary</div>
                            }

                            @{
                                var dataDictAddress = new ViewDataDictionary();
                                //Merge ModelState (required for validation)
                                dataDictAddress.ModelState.Merge(ViewData.ModelState);
                                dataDictAddress.TemplateInfo.HtmlFieldPrefix = "NewAddress";
                                @Html.Partial("_CreateOrUpdateAddressForOnePageCheckOut", Model.NewAddress, dataDictAddress)
                            }
                        </div>

                        <div class="buttons">
                            <input type="button" name="SaveNewAddressButton" value="@T("checkout.save")" class="button-1 new-address-next-step-button" onclick="SaveNewShippingAddress()" style="display: none" />
                        </div>
                    </div>

                    <div class="address-button-section">
                        <div class="new-address-btn" onclick="shippingAddressToggle(this)">
                            <img src="~/Themes/Pavilion/Content/img/select-existing-address-btn.png" />
                        </div>
                    </div>
                </div>

                @Html.Widget("checkout_shipping_address_bottom")
            </div><!--end #shipping-addresses-form-->
        }
    </div>
</div>

<script>
    selectedAddressId=@Model.SelectedShippingAdressId;

    $(document).ready(function () {
        if (selectedAddressId === 0) {
            shippingAddressToggle();
        }
    });

    function shippingAddressToggle() {
        $("#ExistingShippingAddressesView").toggle();
        $("#NewShippingAddressesView").toggle();
        $("#allExistingShippingAddresses").toggle();
        $("#newShippingAddress").toggle();

        var checkShippingAddressDiv = $("#NewShippingAddressesView").is(':visible');
        if (checkShippingAddressDiv === true) {
            var cityList = ["Dhaka", "Gazipur", "Savar", "Narayanganj", "Keraniganj"];

            if ($.inArray($("#NewAddress_City").val(), cityList) === -1 ) {
                $("input[value='Payments.CashOnDelivery']").closest("li").hide();

                if ($("input[value='Payments.CashOnDelivery']").is(":checked")) {
                    $("input[value='Payments.Bkash']").prop("checked", true);
                }
            } else {
                $("input[value='Payments.CashOnDelivery']").closest("li").show();
            }
        } else {
            var selectedElement = $("input[name='SelectedShippingAdressId']:checked");
            showHideCashOnDelivery(selectedElement);
        }
    }
</script>

<script>
    $(document).ready(function () {
        $(window).load(function () {
            $(".owl-wrapper-outer > .owl-wrapper > .owl-item:first-child").addClass("active-owl-item");
        });

        $(".address-item .select-button .select-shipping-address-button").click(function () {
            if ($(this).is(':checked') === true) {
                $(".owl-wrapper-outer .owl-wrapper .owl-item").removeClass("active-owl-item");
                $(this).parent(".select-button").parent(".address-item").parent(".owl-item").addClass("active-owl-item");
            } else {
                $(this).parent(".select-button").parent(".address-item").parent(".owl-item").removeClass("active-owl-item");
            }
        });
    });
</script>


@*@Html.RadioButtonFor(model => model.SelectedShippingAdressId, item.Id,  new {  @class = "button-1 select-shipping-address-button" })*@
@*<input type="button" value="@T("Checkout.ShipToThisAddress")" class="button-1 select-shipping-address-button" onclick="setLocation('@Url.RouteUrl("CheckoutSelectShippingAddress", new { addressid = item.Id })') " />*@

@*<div class="title">
        @if (Model.ExistingAddresses.Count > 0)
        {
            <strong>@T("Checkout.OrEnterNewAddress")</strong>
        }
        else
        {
            <strong>@T("Checkout.EnterShippingAddress")</strong>
        }
    </div>*@

