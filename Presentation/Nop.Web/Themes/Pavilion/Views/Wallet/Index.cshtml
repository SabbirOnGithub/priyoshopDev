 
@model CustomerAddressListModel
@using Nop.Web.Models.Customer;
 
@using Nop.Core;
@{
    Layout = "~/Views/Shared/_ColumnsTwo.cshtml";

    //title
    Html.AddTitleParts(T("PageTitle.Account").Text);
    //page class
    Html.AppendPageCssClassParts("html-account-page");
    Html.AppendPageCssClassParts("html-customer-info-page");
}

@section left
{
    @Html.Action("CustomerNavigation", "Customer", new { selectedTabId = CustomerNavigationEnum.Wallet })
}



<div class="page account-page customer-info-page">
    <div class="page-title">
        <h1>@T("My Account") - @T("Wallet")</h1>
    </div>
    <div class="page-body">
@if (Model.Addresses.Count > 0)
{
    using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()

        var validationSummary = Html.ValidationSummary(true);
        if (!MvcHtmlString.IsNullOrEmpty(validationSummary))
        {
                <div class="message-error">@validationSummary</div>
        }

            <div class="address-list">
                @for (int i = 0; i < Model.Addresses.Count; i++)
                {
                    var address = Model.Addresses[i];
                    <div class="section address-item">
                        <div class="title">
                            <strong>@address.FirstName @address.LastName</strong>
                        </div>
                        <ul class="info">
                            <li class="name">
                                @address.FirstName @address.LastName
                            </li>
                            <li class="email">
                                @Html.LabelFor(model => model.Addresses[i].Email, new { }, ":")
                                @address.Email
                            </li>
                            @if (address.PhoneEnabled)
                            {
                                <li class="phone">
                                    @Html.LabelFor(model => model.Addresses[i].PhoneNumber, new { }, ":")
                                    @address.PhoneNumber
                                </li>
                            }
                            @if (address.FaxEnabled)
                            {
                                <li class="fax">
                                    @Html.LabelFor(model => model.Addresses[i].FaxNumber, new { }, ":")
                                    @address.FaxNumber
                                </li>
                            }
                            @if (address.CompanyEnabled && !String.IsNullOrEmpty(address.Company))
                            {
                                <li class="company">@address.Company</li>
                            }
                            @if (address.StreetAddressEnabled)
                            {
                                <li class="address1">
                                    @address.Address1
                                </li>
                            }
                            @if (address.StreetAddress2Enabled && !String.IsNullOrEmpty(address.Address2))
                            {
                                <li class="address2">
                                    @address.Address2
                                </li>
                            }
                            @if (address.CityEnabled || address.StateProvinceEnabled || address.ZipPostalCodeEnabled)
                            {
                                var cityStateZip = "";
                                if (address.CityEnabled)
                                {
                                    cityStateZip = address.City;
                                    if (address.StateProvinceEnabled || address.ZipPostalCodeEnabled)
                                    {
                                        cityStateZip += ",";
                                    }
                                }
                                if (address.StateProvinceEnabled)
                                {
                                    if (!String.IsNullOrEmpty(cityStateZip))
                                    {
                                        cityStateZip += " ";
                                    }
                                    cityStateZip += address.StateProvinceName;
                                }
                                if (address.ZipPostalCodeEnabled)
                                {
                                    if (!String.IsNullOrEmpty(cityStateZip))
                                    {
                                        cityStateZip += " ";
                                    }
                                    cityStateZip += address.ZipPostalCode;
                                }

                                <li class="city-state-zip">
                                    @cityStateZip
                                </li>
                            }
                            @if (address.CountryEnabled && !String.IsNullOrEmpty(address.CountryName))
                            {
                                <li class="country">
                                    @address.CountryName
                                </li>
                            }
                            @if (!String.IsNullOrEmpty(address.FormattedCustomAddressAttributes))
                            {
                                <li class="custom-attributes-view">
                                    @Html.Raw(address.FormattedCustomAddressAttributes)
                                </li>
                            }
                        </ul>
                         
                    </div>
                }
            </div>
            }
        }
        else
        {

            <div class="no-data" style="margin-top:-77px;background-color:white">
                @T("No Balance")
            </div>
        }
    </div>
</div> 