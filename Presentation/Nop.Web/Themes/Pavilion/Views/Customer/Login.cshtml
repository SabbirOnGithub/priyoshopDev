@model LoginModel
@using Nop.Web.Models.Customer;
@using Nop.Core;
@using Nop.Core.Infrastructure;

@{
    var isCalledAsPopup = !string.IsNullOrEmpty(Context.Request.QueryString["isPopup"]);

    Layout = isCalledAsPopup ? "" : "~/Views/Shared/_ColumnsOne.cshtml";
    //title
    Html.AddTitleParts(T("PageTitle.Login").Text);
    //page class
    Html.AppendPageCssClassParts("html-login-page");

    //register URL with return URL (if specified)
    var registerUrl = Url.RouteUrl("Register");
    if (!string.IsNullOrEmpty(Context.Request.QueryString["returnUrl"]))
    {
        var webHelper = EngineContext.Current.Resolve<IWebHelper>();
        registerUrl = webHelper.ModifyQueryString(registerUrl, "returnurl=" + HttpUtility.UrlEncode(Context.Request.QueryString["returnUrl"]), null);
    }

    Html.AppendScriptParts("~/Themes/Pavilion/Content/intl-tel-input/js/intlTelInput.js");
    Html.AddCssFileParts("~/Themes/Pavilion/Content/css/stylesForLoginPage.css");
}

<div class="page login-page">
    <div class="page-title">
        <h1>@T("Account.Login.Welcome")</h1>
    </div>
    @*@Html.Partial("_ExternalAuthentication.AssociateMessage")
        @Html.Partial("_ExternalAuthentication.Errors")*@

    @{
//var externalMethods = Html.Action("ExternalMethods", "ExternalAuthentication");

        @*if (!MvcHtmlString.IsNullOrEmpty(externalMethods))
            {
                <div class="external-authentication">
                    @{string fbButtonSection = Model.CheckoutAsGuest ? "fb-button-section" : ""; }

                    <div class="@fbButtonSection">
                        @externalMethods
                    </div>
                    @if (Model.CheckoutAsGuest)
                    {
                        <div class="checkout-as-guest-button-section">
                            <div class="title">
                                You don't have to create an <br /> account to place an order <img src="~/Themes/Pavilion/Content/img/icon-excl.png" style="position: relative; top: 2px; left: 0;" />
                            </div>
                            <div class="buttons">
                                <input type="button" class="button-1 checkout-as-guest-button" onclick=" location.href = '@Url.RouteUrl("Checkout")' " value="" />
                            </div>
                        </div>
                    }

                </div>
            }*@
    }

    <div class="page-body">
        <div class="customer-blocks">
            @using (Html.BeginForm())
            {
                var validationSummary = Html.ValidationSummary(true, T("Account.Login.Unsuccessful").Text);

                @*<div class="new-wrapper email-login-block">*@

                @*<div class="title @(@Model.LoginType == "Email" ? "active" : "")">*@
                <div class="title active" style="top: -52px;width: 100%;height: 52px;">
                    <strong>
                        @*@T("Account.Login.NewCustomer")*@
                        Login With Email Address
                    </strong>
                </div>
                <div class="inner-wrapper show active">
                    @*<div class="inner-wrapper @(@Model.LoginType == "Email" ? "show" : "")">*@
                    @if (!MvcHtmlString.IsNullOrEmpty(validationSummary))
                    {
                        <div class="message-error">@validationSummary</div>
                    }
                    <div class="form-fields">
                        @if (Model.UsernamesEnabled)
                        {
                            <div class="inputs">
                                @Html.LabelFor(m => m.Username, new { }, ":")
                                @Html.TextBoxFor(m => m.Username, new { @class = "username", autofocus = "autofocus" })
                                @Html.ValidationMessageFor(m => m.Username)
                            </div>
                        }
                        else
                        {
                            <div class="inputs">
                                @Html.LabelFor(m => m.Email, new { }, ":")
                                @Html.TextBoxFor(m => m.Email, new { @class = "email", autofocus = "autofocus" })
                                @Html.ValidationMessageFor(m => m.Email)
                            </div>
                        }

                        <div class="inputs">
                            @Html.LabelFor(m => m.Password, new { }, ":")
                            @Html.PasswordFor(m => m.Password, new { @class = "password" })
                            @Html.ValidationMessageFor(m => m.Password)
                        </div>

                        <div class="inputs reversed">
                            @Html.CheckBoxFor(m => m.RememberMe)
                            @Html.LabelFor(m => m.RememberMe)
                            <span class="forgot-password">
                                @Html.RouteLink(T("Account.Login.ForgotPassword").Text, "PasswordRecovery")
                            </span>
                        </div>

                    </div>
                    <div class="buttons">
                        <input class="button-1 login-button" type="submit" value="@T(" Account.Login.LoginButton")" />
                    </div>
                </div>

                @*</div>*@

                @*<div class="returning-wrapper fieldset mobile-login-block">
                        <div class="title @(@Model.LoginType != "Email" ? "active" : "")">
                            <strong>
                                Login with Mobile Number
                            </strong>
                        </div>

                        <div class="inner-wrapper @(@Model.LoginType != "Email" ? "show" : "")">
                            <div class="form-fields">
                                <div class="inputs">
                                    @Html.LabelFor(m => m.MobileNumber, new { }, ":")
                                    @Html.TextBoxFor(m => m.MobileNumber, new { @class = "mobile-number", autofocus = "autofocus" })
                                    @Html.ValidationMessageFor(m => m.MobileNumber)
                                    <span id="valid-msg" class="hide number-validation" style="color: green">✓</span>
                                    <span id="error-msg" class="hide number-validation" style="color: red">✗</span>
                                </div>
                            </div>
                            <div class="buttons">
                                <input id="mobileLoginBtn" class="button-1 login-button" type="submit" disabled="true" value="@T("Account.Login.LoginSignUpButton")" style="background: lightcoral" />
                            </div>
                        </div>
                    </div>*@

                @Html.HiddenFor(m => m.LoginType)
            }

        </div><!-- container -->
    </div>
</div>

<script type="text/javascript">
    $(document).ready(function () {

        //$(".email-login-block .title").click(function () {
            $("#LoginType").val("Email");
        //});
        //$(".mobile-login-block .title").click(function () {
        //    $("#LoginType").val("MobileNumber");
        //});

    });

    ////validate mobile number on key up
    //$('#MobileNumber').on('keyup', function (event) {
    //    var telInput = $("#MobileNumber"),
    //        errorMsg = $("#error-msg"),
    //        validMsg = $("#valid-msg");

    //    // initialise plugin
    //    telInput.intlTelInput({
    //        utilsScript: "/Themes/Pavilion/Content/intl-tel-input/js/utils.js"
    //    });

    //    var reset = function () {
    //        telInput.removeClass("error");
    //        errorMsg.addClass("hide");
    //        validMsg.addClass("hide");
    //    };

    //    reset();
    //    if ($.trim(telInput.val())) {
    //        if (telInput.intlTelInput("isValidNumber")) {
    //            validMsg.removeClass("hide");
    //            $('#mobileLoginBtn').attr('disabled', false);
    //            $('#mobileLoginBtn').css({ 'background': '#f74258' });
    //        } else {
    //            telInput.addClass("error");
    //            errorMsg.removeClass("hide");
    //            $('#mobileLoginBtn').attr('disabled', true);
    //            $('#mobileLoginBtn').css({ 'background': 'lightcoral' });
    //        }
    //    }
    //});

    //mobile number country code
    //$("#MobileNumber").intlTelInput
    //    ({
    //        allowDropdown: false,
    //        // autoHideDialCode: false,
    //        // autoPlaceholder: "off",
    //        // dropdownContainer: "body",
    //        // excludeCountries: ["us"],
    //        // geoIpLookup: function(callback) {
    //        //   $.get("http://ipinfo.io", function() {}, "jsonp").always(function(resp) {
    //        //     var countryCode = (resp && resp.country) ? resp.country : "";
    //        //     callback(countryCode);
    //        //   });
    //        // },
    //        // initialCountry: "auto",
    //        nationalMode: false,
    //        // numberType: "MOBILE",
    //        //onlyCountries: ['gb', 'us',  'ch', 'ca', 'do'],
    //        onlyCountries: ['bd'],
    //        //preferredCountries: ['bd'],
    //        separateDialCode: true,
    //        utilsScript: "/Themes/Pavilion/Content/intl-tel-input/js/utils.js"
    //    });
</script>