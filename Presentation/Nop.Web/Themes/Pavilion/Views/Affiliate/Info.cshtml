@model AffiliateInfoModel
@using Nop.Web.Models.Affiliates;
@using Nop.Web.Models.Customer;
@using Nop.Core;
@{
    Layout = "~/Views/Shared/_ColumnsTwo.cshtml";

    //title
    Html.AddTitleParts(T("PageTitle.AffiliateAccount").Text);
    //page class
    Html.AppendPageCssClassParts("html-account-page");
    Html.AppendPageCssClassParts("html-address-edit-page");
}
@section left
{
    @Html.Action("CustomerNavigation", "Customer", new { selectedTabId = CustomerNavigationEnum.AffiliateInfo })
}

<script type="text/javascript">
    function copyUrl() {
        var copyText = document.getElementById("affiliate-url");
        copyText.select();
        document.execCommand("copy");
        $('#copied-msg').show('slow');
        setTimeout(function () {
            $('#copied-msg').hide('slow');
        }, 5000);
    }

    $(document).ready(function () {
        $("#@Html.FieldIdFor(model => model.CountryId)").change(function () {
            var selectedItem = $(this).val();
            var ddlStates = $("#@Html.FieldIdFor(model => model.StateProvinceId)");
            var statesProgress = $("#states-loading-progress");
            statesProgress.show();
            $.ajax({
                cache: false,
                type: "GET",
                url: "@(Url.RouteUrl("GetStatesByCountryId"))",
                data: { "countryId": selectedItem, "addSelectStateItem": "true" },
                success: function (data) {
                    ddlStates.html('');
                    $.each(data, function (id, option) {
                        ddlStates.append($('<option></option>').val(option.id).html(option.name));
                    });
                    statesProgress.hide();
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    alert('Failed to retrieve states.');
                    statesProgress.hide();
                }
            });
        });
    });
</script>

<div class="page account-page customer-info-page">
    <div class="page-title">
        @if (Model.Applied)
        {
            <h1>@T("Account.Affiliates.InfoTitle")</h1>
        }
        else
        {
            <h1>@T("Account.Affiliates.ApplyTitle")</h1>
        }
    </div>
    <div class="page-body">
        @using (Html.BeginForm())
        {
            @Html.AntiForgeryToken()
            var validationSummary = Html.ValidationSummary(true);
            if (!MvcHtmlString.IsNullOrEmpty(validationSummary))
            {
                <div class="message-error">@validationSummary</div>
            }
            <div class="fieldset">
                <div class="title">
                    <strong>@T("Account.AffiliateDetails")</strong>
                </div>
                <div class="form-fields">
                    @if (Model.Applied)
                    {
                        <div class="inputs">
                            @Html.LabelFor(model => model.Url, new { }, ":")
                            <input class="text-box single-line" id="affiliate-url" type="text" value="@Model.Url" readonly>
                            <button onclick="copyUrl()" type="button" class="button-1 save-address-button">Copy Url</button>
                            <span class="field-validation-valid" id="copied-msg" style="display: none">@T("Plugins.Widgets.BsAffiliate.Info.UrlCopied")</span>
                        </div>
                    }
                    <div class="inputs">
                        @Html.LabelFor(model => model.FirstName, new { }, ":")
                        @Html.EditorFor(model => model.FirstName)
                        @Html.RequiredHint()
                        @Html.ValidationMessageFor(model => model.FirstName)
                    </div>
                    <div class="inputs">
                        @Html.LabelFor(model => model.LastName, new { }, ":")
                        @Html.EditorFor(model => model.LastName)
                        @Html.RequiredHint()
                        @Html.ValidationMessageFor(model => model.LastName)
                    </div>
                    <div class="inputs">
                        @Html.LabelFor(model => model.Email, new { }, ":")
                        @Html.EditorFor(model => model.Email)
                        @Html.RequiredHint()
                        @Html.ValidationMessageFor(model => model.Email)
                    </div>
                    <div class="inputs">
                        @Html.LabelFor(model => model.CountryId, new { }, ":")
                        @Html.DropDownListFor(model => model.CountryId, Model.AvailableCountries)
                        @Html.RequiredHint()
                        @Html.ValidationMessageFor(model => model.CountryId)
                    </div>
                    <div class="inputs">
                        @Html.LabelFor(model => model.StateProvinceId, new { }, ":")
                        @Html.DropDownListFor(model => model.StateProvinceId, Model.AvailableStates)
                        @Html.RequiredHint()
                        <span id="states-loading-progress" style="display: none;" class="please-wait">@T("Common.Wait...")</span>
                        @Html.ValidationMessageFor(model => model.StateProvinceId)
                    </div>
                    <div class="inputs">
                        @Html.LabelFor(model => model.City, new { }, ":")
                        @Html.EditorFor(model => model.City)
                        @Html.RequiredHint()
                        @Html.ValidationMessageFor(model => model.City)
                    </div>
                    <div class="inputs">
                        @Html.LabelFor(model => model.Address1, new { }, ":")
                        @Html.EditorFor(model => model.Address1)
                        @Html.RequiredHint()
                        @Html.ValidationMessageFor(model => model.Address1)
                    </div>
                    <div class="inputs">
                        @Html.LabelFor(model => model.ZipPostalCode, new { }, ":")
                        @Html.EditorFor(model => model.ZipPostalCode)
                        @Html.RequiredHint()
                        @Html.ValidationMessageFor(model => model.ZipPostalCode)
                    </div>
                    <div class="inputs">
                        @Html.LabelFor(model => model.PhoneNumber, new { }, ":")
                        @Html.EditorFor(model => model.PhoneNumber)
                        @Html.RequiredHint()
                        @Html.ValidationMessageFor(model => model.PhoneNumber)
                    </div>
                    <div class="inputs">
                        @Html.LabelFor(model => model.BKashNumber, new { }, ":")
                        @Html.EditorFor(model => model.BKashNumber)
                        @Html.RequiredHint()
                        @Html.ValidationMessageFor(model => model.BKashNumber)
                    </div>
                    <div class="inputs">
                        @Html.LabelFor(model => model.FriendlyUrlName, new { }, ":")
                        @Html.EditorFor(model => model.FriendlyUrlName)
                        @Html.ValidationMessageFor(model => model.FriendlyUrlName)
                    </div>
                </div>
            </div>

            <div class="buttons">
                @if (Model.Applied)
                {
                    <input type="submit" class="button-1 save-address-button" value="@T("Account.Affiliates.UpdateButton")" />
                }
                else
                {
                    <input type="submit" class="button-1 save-address-button" value="@T("Account.Affiliates.ApplyButton")" />
                }
            </div>
        }
    </div>
</div>