@{
    Layout = "~/Administration/Views/Shared/_AdminLayout.cshtml";
    ViewBag.Title = "Purchase User Agent"; ;
}
@model Nop.Plugin.Purchase.UserAgent.Models.OrderViewModel
@using Nop.Web.Framework

<div class="content-header clearfix">
    <h1 class="pull-left">
        @T("Admin.Purchase.UserAgent.Title")
    </h1>
</div>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    <div class="content">
        <div class="form-horizontal">
            <div class="panel-group">
                <div class="panel panel-default panel-search">
                    <div class="panel-body">
                        <div class="row">
                            <div class="col-md-5">
                                <div class="form-group">
                                    <div class="col-md-4">
                                        @Html.NopLabelFor(model => model.UserAgentId)
                                    </div>
                                    <div class="col-md-8">
                                        @Html.NopDropDownList("UserAgentId", Model.AvailableUserAgentTypes)
                                    </div>
                                </div>
                                <div class="form-group">
                                    <div class="col-md-4">
                                        @Html.NopLabelFor(model => model.OrderId)
                                    </div>
                                    <div class="col-md-8">
                                        @Html.NopEditorFor(model => model.OrderId)
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-5">
                                <div class="form-group">
                                    <div class="col-md-4">
                                        @Html.NopLabelFor(model => model.CustomerName)
                                    </div>
                                    <div class="col-md-8">
                                        @Html.NopEditorFor(model => model.CustomerName)
                                    </div>
                                </div>
                                <div class="form-group">
                                    <div class="col-md-4">
                                        @Html.NopLabelFor(model => model.CustomerId)
                                    </div>
                                    <div class="col-md-8">
                                        @Html.NopEditorFor(model => model.CustomerId)
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-7 col-md-offset-5">
                                <button type="button" id="search-orders" class="btn btn-primary btn-search">
                                    <i class="fa fa-search"></i>
                                    @T("Admin.Common.Search")
                                </button>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="panel panel-default">
                    <div class="panel-body">
                        <div id="orders-grid"></div>

                        <script>
						$(document).ready(function() {
							$("#orders-grid").kendoGrid({
								dataSource: {
									type: "json",
									transport: {
										read: {
											url: "@Html.Raw(Url.Action("GetList", "PurchaseUserAgent"))",
											type: "POST",
											dataType: "json",
											data: additionalData
										}
									},
									schema: {
										data: "Data",
										total: "Total",
										errors: "Errors"
									},
									requestEnd: function (e) {
										if (e.type == "read") {
											var response = e.response;
											if (response) {
												//store extra data
												reportAggregates = e.response["ExtraData"];
											}
										}
									},
									error: function(e) {
										display_kendoui_grid_error(e);
										// Cancel the changes
										this.cancelChanges();
									},
									pageSize: 15,
									serverPaging: true,
									serverFiltering: true,
									serverSorting: true
								},
								pageable: {
									refresh: true,
									pageSizes: [10, 15, 25, 50, 100]
								},
								scrollable: false,
								dataBound: onDataBound,
								columns: [
									{
                                        field: "OrderId",
										headerTemplate: "<input id='mastercheckbox' type='checkbox'/>",
										headerAttributes: { style: "text-align:center" },
										attributes: { style: "text-align:center" },
										template: "<input type='checkbox' value='#=OrderId#' class='checkboxGroups'/>",
										width: 30
									},
									{
										field: "OrderId",
										title: "@T("Admin.Purchase.UserAgent.OrderId")",
                                        width: 80,
                                        template: "<a href='/Admin/Customer/Order/#=OrderId#'>#=OrderId#</a>",
									},
									{
										field: "CustomerName",
										title: "@T("Admin.Purchase.UserAgent.CustomerName")",
										width: 100,
										template: "<a href='/Admin/Customer/Edit/#=CustomerId#'>#=CustomerName#</a>",
									},
									{
										field: "UserAgent",
										title: "@T("Admin.Purchase.UserAgent.UserAgent")",
										width: 100
									}, {
										field: "CreatedOnUtc",
										title: "@T("Admin.Purchase.UserAgent.CreatedOnUtc")",
										width: 100,
										type: "date",
										format: "{0:G}"
									},
									{
										field: "Id",
										title: "@T("Admin.Common.Edit")",
										width: 40,
										template: '<a href="/Admin/Order/Edit/#=OrderId#">@T("Admin.Common.Edit")</a>'
									}
								]
							} );
						});
                        </script>

                        <script type="text/javascript">
						var selectedIds = [];
						var reportAggregates = "";

						$(document).ready(function () {
							//search button
							$('#search-orders').click(function () {
								//search
								var grid = $('#orders-grid').data('kendoGrid');
								grid.dataSource.page(1); //new search. Set page size to 1
								//grid.dataSource.read(); we already loaded the grid above using "page" function
								//clear selected checkboxes
								$('.checkboxGroups').attr('checked', false).change();
								selectedIds = [];
								return false;
							});

							$('#mastercheckbox').click(function () {
								$('.checkboxGroups').attr('checked', $(this).is(':checked')).change();
							});

							//wire up checkboxes.
							$('#orders-grid').on('change', 'input[type=checkbox][id!=mastercheckbox]', function (e) {
								var $check = $(this);
								if ($check.is(":checked") == true) {
									var checked = jQuery.inArray($check.val(), selectedIds);
									if (checked == -1) {
										//add id to selectedIds.
										selectedIds.push($check.val());
									}
								}
								else {
									var checked = jQuery.inArray($check.val(), selectedIds);
									if (checked > -1) {
										//remove id from selectedIds.
										selectedIds = $.grep(selectedIds, function (item, index) {
											return item != $check.val();
										});
									}
								}
								updateMasterCheckbox();
							});
						});

						function additionalData() {
							var data = {
                                UserAgentId: $('#@Html.FieldIdFor(model => model.UserAgentId)').val(),
								OrderId: $('#@Html.FieldIdFor(model => model.OrderId)').val(),
								CustomerName: $('#@Html.FieldIdFor(model => model.CustomerName)').val(),
								CustomerId: $('#@Html.FieldIdFor(model => model.CustomerId)').val(),
							};
							addAntiForgeryToken(data);
							return data;
						}

						function onDataBound(e) {
							$('#orders-grid input[type=checkbox][id!=mastercheckbox]').each(function () {
								var currentId = $(this).val();
								var checked = jQuery.inArray(currentId, selectedIds);
								//set checked based on if current checkbox's value is in selectedIds.
								$(this).attr('checked', checked > -1);
							});

							updateMasterCheckbox();

							//update order totals summary
							if (reportAggregates != "") {
								for (var key in reportAggregates) {
									$('#aggregator-profit-block').text(reportAggregates['aggregatorprofit']);
									$('#aggregator-shipping-block').text(reportAggregates['aggregatorshipping']);
									$('#aggregator-tax-block').text(reportAggregates['aggregatortax']);
									$('#aggregator-total-block').text(reportAggregates['aggregatortotal']);
								}
							}
						}

						function updateMasterCheckbox() {
							var numChkBoxes = $('#orders-grid input[type=checkbox][id!=mastercheckbox]').length;
							var numChkBoxesChecked = $('#orders-grid input[type=checkbox][id!=mastercheckbox]:checked').length;
							$('#mastercheckbox').attr('checked', numChkBoxes == numChkBoxesChecked && numChkBoxes > 0);
						}
                        </script>
                    </div>
                </div>
            </div>
        </div>
    </div>
}