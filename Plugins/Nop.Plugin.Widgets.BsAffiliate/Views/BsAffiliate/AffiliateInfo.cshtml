@model Nop.Plugin.Widgets.BsAffiliate.Models.AffiliateModel
@using Nop.Web.Framework;
@using Nop.Web.Framework.UI;
@{
    Layout = "~/Plugins/Widgets.BsAffiliate/Views/BsAffiliate/_ColumnsTwoPlugin.cshtml";

    Html.AppendPageCssClassParts("html-account-page");
    Html.AppendPageCssClassParts("html-address-edit-page");
}
@section left
{
    @Html.Action("CustomerNavigation", "Customer", new { selectedTabId = -1 })
}
<script type="text/javascript">
    function copyUrl() {
        var copyText = document.getElementById("affiliate-url");
        copyText.select();
        document.execCommand("copy");
        $('#copied-msg').show('slow');
        setTimeout(function () {
            $('#copied-msg').hide('slow');
        }, 5000);
    }

    $(document).ready(function () {

        $("#@Html.FieldIdFor(model => model.Address.CountryId)").change(function () {
            var selectedItem = $(this).val();
            var ddlStates = $("#@Html.FieldIdFor(model => model.Address.StateProvinceId)");
            var statesProgress = $("#states-loading-progress");
            statesProgress.show();
            $.ajax({
                cache: false,
                type: "GET",
                url: "@(Url.RouteUrl("GetStatesByCountryId"))",
                data: { "countryId": selectedItem, "addSelectStateItem": "true" },
                success: function (data) {
                    ddlStates.html('');
                    $.each(data, function (id, option) {
                        ddlStates.append($('<option></option>').val(option.id).html(option.name));
                    });
                    statesProgress.hide();
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    alert('Failed to retrieve states.');
                    statesProgress.hide();
                }
            });
        });
    });
</script>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    <div class="page account-page address-edit-page">
        <div class="page-title">
            @if (Model.IsApplied)
            {
                <h1>@T("Plugins.Widgets.BsAffiliate.InfoTitle")</h1>
            }
            else
            {
                <h1>@T("Plugins.Widgets.BsAffiliate.ApplyTitle")</h1>
            }
        </div>
        <div class="page-body">
            @{
                var validationSummary = Html.ValidationSummary(true);
            }
            @if (!MvcHtmlString.IsNullOrEmpty(validationSummary))
            {
                <div class="message-error">
                    @validationSummary
                </div>
            }

            @if (Model.IsApplied && !Model.Active)
            {
                <div class="message-error" style="padding-bottom: 0">
                    @T("Plugins.Widgets.BsAffiliate.Info.VerificationPendingMessage")
                </div>
            }
            <div class="edit-address">
                @if (Model.IsApplied)
                {
                    if (!string.IsNullOrWhiteSpace(Model.Url))
                    {
                        <div class="inputs">
                            @Html.LabelFor(model => model.Url, new { }, ":")
                            <input class="text-box single-line" id="affiliate-url" type="text" value="@Model.Url" readonly>
                            <button onclick="copyUrl()" type="button" class="button-1 save-address-button">Copy Url</button>
                            <span class="field-validation-valid" id="copied-msg" style="display: none">@T("Plugins.Widgets.BsAffiliate.Info.UrlCopied")</span>
                        </div>
                    }
                }
                <div class="inputs">
                    @Html.LabelFor(model => model.Address.FirstName, new { }, ":")
                    @Html.EditorFor(model => model.Address.FirstName)
                    @Html.RequiredHint()
                    @Html.ValidationMessageFor(model => model.Address.FirstName)
                </div>
                <div class="inputs">
                    @Html.LabelFor(model => model.Address.LastName, new { }, ":")
                    @Html.EditorFor(model => model.Address.LastName)
                    @Html.RequiredHint()
                    @Html.ValidationMessageFor(model => model.Address.LastName)
                </div>
                <div class="inputs">
                    @Html.LabelFor(model => model.Address.Email, new { }, ":")
                    @Html.EditorFor(model => model.Address.Email)
                    @Html.RequiredHint()
                    @Html.ValidationMessageFor(model => model.Address.Email)
                </div>
                <div class="inputs">
                    @Html.LabelFor(model => model.Address.CountryId, new { }, ":")
                    @Html.DropDownListFor(model => model.Address.CountryId, Model.Address.AvailableCountries)
                    @Html.RequiredHint()
                    @Html.ValidationMessageFor(model => model.Address.CountryId)
                </div>
                <div class="inputs">
                    @Html.LabelFor(model => model.Address.StateProvinceId, new { }, ":")
                    @Html.DropDownListFor(model => model.Address.StateProvinceId, Model.Address.AvailableStates)
                    <span id="states-loading-progress" style="display: none;" class="please-wait">@T("Common.Wait...")</span>
                    @Html.ValidationMessageFor(model => model.Address.StateProvinceId)
                </div>
                <div class="inputs">
                    @Html.LabelFor(model => model.Address.City, new { }, ":")
                    @Html.EditorFor(model => model.Address.City)
                    @Html.RequiredHint()
                    @Html.ValidationMessageFor(model => model.Address.City)
                </div>
                <div class="inputs">
                    @Html.LabelFor(model => model.Address.Address1, new { }, ":")
                    @Html.EditorFor(model => model.Address.Address1)
                    @Html.RequiredHint()
                    @Html.ValidationMessageFor(model => model.Address.Address1)
                </div>
                <div class="inputs">
                    @Html.LabelFor(model => model.Address.ZipPostalCode, new { }, ":")
                    @Html.EditorFor(model => model.Address.ZipPostalCode)
                    @Html.RequiredHint()
                    @Html.ValidationMessageFor(model => model.Address.ZipPostalCode)
                </div>
                <div class="inputs">
                    @Html.LabelFor(model => model.Address.PhoneNumber, new { }, ":")
                    @Html.EditorFor(model => model.Address.PhoneNumber)
                    @Html.RequiredHint()
                    @Html.ValidationMessageFor(model => model.Address.PhoneNumber)
                </div>
                <div class="inputs">
                    @Html.LabelFor(model => model.BKash, new { }, ":")
                    @Html.EditorFor(model => model.BKash)
                    @Html.ValidationMessageFor(model => model.BKash)
                </div>
                <div class="inputs">
                    @Html.LabelFor(model => model.FriendlyUrlName, new { }, ":")
                    @Html.EditorFor(model => model.FriendlyUrlName)
                    @Html.ValidationMessageFor(model => model.FriendlyUrlName)
                </div>
            </div>

            <div class="buttons">
                @if (Model.IsApplied)
                {
                    <input type="submit" class="button-1 save-address-button" value="@T("Plugins.Widgets.BsAffiliate.UpdateButton")" />
                }
                else
                {
                    <input type="submit" class="button-1 save-address-button" value="@T("Plugins.Widgets.BsAffiliate.ApplyButton")" />
                }
            </div>
        </div>
    </div>
}